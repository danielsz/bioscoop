#+TITLE: Bioscoop
#+SUBTITLE: Creative coding with video
#+OPTIONS: toc:1 num:nil
#+HTML_HEAD: <link rel="stylesheet" href="css/et-book.css" type="text/css" media="screen" />
#+HTML_HEAD: <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,300i,400,600&display=swap" rel="stylesheet">
#+HTML_HEAD: <link rel="stylesheet" href="css/main.css" type="text/css" media="screen" />
#+HTML_HEAD: <link rel="stylesheet" href="css/post.css" type="text/css" media="screen" />
#+HTML_HEAD:  <script type="text/javascript" src="js/navigation.js"></script>

* Motivation

Historically, video editing has progressed from destructive
techniques, ie. cutting the negative, to non-destructive ones,
ie. non-linear editing. The latter has become possible due to film
being no longer analog but digital. In both cases, however, the
creative process is manual, or mouse-based. A different approach,
often overlooked, is programmatic: the editor spells out the edits he
wants to apply, and those are being carried out by an underlying
system.  FFmpeg is such a system; capable of carrying pretty much any
editing instruction you can think of.

While ffmpeg is being used in the creative coding community to make
video art, most video professionals prefer to stay away from the
notoriously complex and error-prone string-based syntax. Indeed, its
usability is hindered by the information density of its textual
interface.

Bioscoop unleashes FFmpeg from its shackles and puts programmability
in the center of the creative process.  It is a Domain Specific
Language (DSL) builds upon that transforms how developers work with
FFmpeg filtergraphs.


Yes, FFmpeg is everywhere and it is amazing, but it is mainly used for
post-processing. Bioscoop is an attempt to unleash the power of FFmpeg
in the creative process. It offers an alternative to Non-Linear
editing of videos in favor of a programmatic approach.

FFmpeg offers a wealth of filters that can be
terseness, information density


FFmpeg has asserted its dominance in the post-processing phase of
video 
Unleash the power of FFmpeg in the creative process, beyond its
dominance in the post-processing 

It is a language-focused solution to the information density problem
of FFmpeg's filtergraph syntax.
It's not only that they are dense and terse, they lack
abstractions. They do not allow for composition, which is a key
principle when designing a system.

Told in the words of communties:

- Clojurians: a dsl that compiles Lisp forms to FFmpeg's filtergraph
- PLT: A context-free grammar describing a simple Lisp language -> AST transformation into data structues
-
  
* The filtergraph

In FFmpeg, atomic editing tasks like scaling, cropping, blending,
coloring, etc. are captured in filters. FFmpeg has more than 500 of
them. When applying filters in sequence on source material, filters
are being written in sequence, separated by a coma. Those are called
filterchains. Filterchains can be labeled at both ends, so that their
output can serve as input to another filterchain. Filterchains form a
structure known as a directed acyclic graph (DAG), and FFmpeg calls it
a filtergraph. Filtergraphs are being passed to FFmpeg in the
~-filter_complex~ parameter.

* Inspiration

#+begin_quote
The acts of the mind, wherein it exerts its power over simple ideas, are chiefly these three:

1. Combining several simple ideas into one compound one, and thus all
   complex ideas are made.

2. The second is bringing two ideas, whether simple or complex,
   together, and setting them by one another so as to take a view of
   them at once, without uniting them into one, by which it gets all
   its ideas of relations.

3. The third is separating them from all other ideas that accompany
   them in their real existence: this is called abstraction, and thus
   all its general ideas are made.

â€”John Locke, An Essay Concerning Human Understanding (1690)
#+end_quote


